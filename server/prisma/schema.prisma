generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
 id                Int           @id @default(autoincrement())
 email             String        @unique
 name              String?
 spotifyUserId     String?       @unique
 spotifyUserURI    String?       @unique
 photoURL          String?
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 isOnboarded       Boolean       @default(false)
 posts             Posts[]
 comments          Comments[]
 playlists         Playlists[]
 nestedComments    NestedComments[]
}

model Playlists {
 id                Int           @id @default(autoincrement())
 name              String
 photoURL          String?
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 spotifyPlaylistId String?       @unique
 spotifyPlaylistURI String?      @unique
 associatedGenres  String[]
 featuredArtists   Artists[]
 purpose           String?
 users             Users[]
 posts             Posts[]
}

model Posts {
 id                Int           @id @default(autoincrement())
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 content           String
 authorId          Int           
 author            Users         @relation(fields: [authorId], references: [id])
 comments          Comments[]
 playlistId        Int?          
 playlist          Playlists?     @relation(fields: [playlistId], references: [id])
}

model Comments {
 id                Int           @id @default(autoincrement())
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 content           String
 authorId          Int
 author            Users         @relation(fields: [authorId], references: [id])
 postId            Int
 post              Posts          @relation(fields: [postId], references: [id])
 nestedComments    NestedComments[]
}

model NestedComments {
 id                Int           @id @default(autoincrement())
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 authorId          Int
 author            Users         @relation(fields: [authorId], references: [id])
 content           String
 commentId         Int
 comment           Comments       @relation(fields: [commentId], references: [id])
}

model Artists {
 id                Int           @id @default(autoincrement())
 name              String
 photoURL          String?
 createdAt         DateTime      @default(now())
 updatedAt         DateTime      @updatedAt
 deletedAt         DateTime?
 genres            String[]
 spotifyArtistId   String?       @unique
 spotifyArtistURI  String?       @unique
 playlists         Playlists[]
}
