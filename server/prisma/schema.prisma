generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comments {
  id             Int        @id @default(autoincrement())
  username       String     @db.VarChar(255)
  body           String     @db.VarChar(255)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  postId         Int?
  userId         Int?
  commentId      Int?
  Comments       Comments?  @relation("CommentsToComments", fields: [commentId], references: [id])
  replies        Comments[] @relation("CommentsToComments")
  Posts          Posts?     @relation(fields: [postId], references: [id])
  Users          Users?     @relation(fields: [userId], references: [id])
  Likes          Likes[]
}

model Likes {
  id        Int       @id @default(autoincrement())
  username  String    @db.VarChar(255)
  postId    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  commentId Int?
  Comments  Comments? @relation(fields: [commentId], references: [id])
  Posts     Posts?     @relation(fields: [postId], references: [id], onDelete: NoAction)
}

model Posts {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  body      String     @db.VarChar(255)
  username  String     @db.VarChar(255)
  audioTag  String?    @db.VarChar(255)
  mediaLink String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int?
  Comments  Comments[]
  Likes     Likes[]
  Users     Users?     @relation(fields: [userId], references: [id])
  tags      Tags[]     // Add a new field to establish the relationship
}

model Users {
  id           Int        @id @default(autoincrement())
  username     String     @unique @db.VarChar(255)
  displayPhoto String?    @db.VarChar(255)
  bio          String?    @db.VarChar(255)
  email        String     @unique @db.VarChar(255)
  topArtists   String[]   @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Comments     Comments[]
  Posts        Posts[]
}

model Tags {
  name      String  @db.VarChar(255)
  spotifyId String  @id @db.VarChar(255)
  posts     Posts[]  // Add a new field to establish the relationship
}

